// /scripts/posts.js

import { createPost, fetchCategories } from "./ui.js";

let currentPage = 1;
const limit = 5; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É

const myPostsContainer = document.getElementById("myPostsContainer");
const postsContainer = document.getElementById("postsContainer");

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –ø–æ—Å—Ç—ñ–≤
export async function fetchAndRenderPosts(page = 1) {
    currentPage = page;
    try {
        const response = await fetch(`/api/posts/paginated?page=${page}&limit=${limit}`, {
            method: "GET",
            // headers: {
            //     // –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ—Å—Ç—ñ–≤ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –º–æ–∂–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω
            //     "Authorization": `Bearer ${localStorage.getItem("authToken")}`,
            // },
        });

        if (response.ok) {
            const { posts, total } = await response.json();

            renderPosts(posts);
            renderPaginationControls(currentPage, Math.ceil(total / limit));
        } else {
            console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—Å—Ç–∏. –°—Ç–∞—Ç—É—Å:", response.status);
            postsContainer.innerHTML = "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>";
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ—Å—Ç—ñ–≤:", error);
        postsContainer.innerHTML = "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>";
    }
}

export async function fetchAndRenderUserPosts() {
    try {
        const response = await fetch(`/api/posts/my-posts`, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${localStorage.getItem("authToken")}`,
            },
        });

        console.log(response);

        if (response.ok) {
            const posts = await response.json();
            renderUserPosts(posts);
        } else {
            console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°—Ç–∞—Ç—É—Å:", response.status);
            myPostsContainer.innerHTML = "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>";
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        myPostsContainer.innerHTML = "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>";
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –ø–æ—Å—Ç—ñ–≤
function renderPosts(posts) {
    console.log('Rendering posts: ', posts);
    postsContainer.innerHTML = "";

    if (posts.length > 0) {
        posts.forEach((post, index) => {
            console.log('Rendering post: ', post);
            const postElement = document.createElement("div");
            postElement.classList.add("post");

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è –∫–ª—ñ–∫—É –Ω–∞ –ø–æ—Å—Ç
            postElement.addEventListener("click", () => {
                window.location.href = `post?postId=${post.id}`;
            });

            // –§–æ—Ä–º—É—î–º–æ HTML-—Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ—é –¥–∞—Ç–æ—é
            const formattedDate = formatDate(post.createdAt);

            postElement.innerHTML = `
                <h3>${post.title}</h3>
                <div class="post-meta">
                    <span class="author">–ê–≤—Ç–æ—Ä: ${post.author}</span> |
                    <span class="date">–î–∞—Ç–∞: ${formattedDate}</span> |
                    <span class="categories">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${post.categoryTitles.join(", ")}</span>
                </div>
                <p>${post.content}</p>
                <div class="post-stats">
                    <span class="like-count">üëç ${post.likesCount}</span>
                    <span class="dislike-count">üëé ${post.dislikesCount}</span>
                    <span class="comment-count">üí¨ ${post.commentsCount}</span>
                </div>
            `;

            // –î–æ–¥–∞—î–º–æ –ø–æ—Å—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            postsContainer.appendChild(postElement);

            // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å .show –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É
            setTimeout(() => {
                postElement.classList.add('show');
            }, index * 100); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ—è–≤–æ—é –ø–æ—Å—Ç—ñ–≤ (100ms –º—ñ–∂ –∫–æ–∂–Ω–∏–º)
        });
    } else {
        postsContainer.innerHTML = "<p>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.</p>";
    }
}

function renderUserPosts(posts) {
    myPostsContainer.innerHTML = "";

    if (posts.length > 0) {
        posts.forEach((post, index) => {
            const postElement = document.createElement("div");
            postElement.classList.add("post");

            postElement.innerHTML = `
                <h3>${post.title}</h3>
                <div class="post-meta">
                    <span class="date">–î–∞—Ç–∞: ${formatDate(post.createdAt)}</span> |
                    <span class="categories">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${post.categoryTitles.join(", ")}</span>
                </div>
                
                <p>${post.content}</p>
                <div class="post-stats"> 
                    <span class="like-count likeButton" data-post-id="${post.id}">üëç ${post.likesCount}</span>
                    <span class="dislike-count">üëé ${post.dislikesCount}</span>
                    <span class="comment-count commentButton" data-post-id="${post.id}">üí¨ ${post.commentsCount}</span>
                </div>
                <div class="post-actions">
                    <button class="edit-post-button" data-post-id="${post.id}">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                    <button class="delete-post-button" data-post-id="${post.id}">–í–∏–¥–∞–ª–∏—Ç–∏</button>
                </div>
            `;
            myPostsContainer.appendChild(postElement);

            // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å .show –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É
            setTimeout(() => {
                postElement.classList.add('show');
            }, index * 100); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ—è–≤–æ—é –ø–æ—Å—Ç—ñ–≤ (100ms –º—ñ–∂ –∫–æ–∂–Ω–∏–º)
        });

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        attachUserPostHandlers();
    } else {
        myPostsContainer.innerHTML = "<p>–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤.</p>";
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function attachUserPostHandlers() {
    const editButtons = document.querySelectorAll(".edit-post-button");
    const deleteButtons = document.querySelectorAll(".delete-post-button");

    editButtons.forEach(button => {
        button.addEventListener("click", handleEditPost);
    });

    deleteButtons.forEach(button => {
        button.addEventListener("click", handleDeletePost);
    });
}

// –Ü–º–µ–Ω–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
function handleUpdatePost(postId) {
    return async () => {
        const title = document.getElementById("postTitle").value;
        const content = document.getElementById("postContent").value;

        // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        const selectedCategories = Array.from(document.querySelectorAll(".category-card.selected"))
            .map(card => card.dataset.categoryId);

        const userData = JSON.parse(localStorage.getItem("userData"));

        if (!userData) {
            alert("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.");
            return;
        }

        if (selectedCategories.length === 0) {
            alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.");
            return;
        }

        try {
            const response = await fetch(`/api/posts/update/${postId}`, {
                method: "PUT",
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem("authToken")}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    title,
                    content,
                    categoryIds: selectedCategories,
                }),
            });

            if (response.ok) {
                alert("–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                createPostForm.style.display = "none";
                myPostsContainer.style.display = "block";
                postsContainer.style.display = "none"; // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å—Ç—ñ–≤, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω

                // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –¥–æ "–°—Ç–≤–æ—Ä–∏—Ç–∏"
                submitPostButton.textContent = "–°—Ç–≤–æ—Ä–∏—Ç–∏";

                // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
                submitPostButton.removeEventListener("click", handleUpdatePost(postId));

                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ –∑–Ω–æ–≤—É
                submitPostButton.addEventListener("click", createPost);

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await fetchAndRenderUserPosts();
            } else {
                console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ—Å—Ç. –°—Ç–∞—Ç—É—Å:", response.status);
                alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ—Å—Ç.");
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞:", error);
            alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞.");
        }
    };
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞
async function handleEditPost(event) {
    event.stopPropagation(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ—Å—Ç–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É

    const postId = event.target.getAttribute("data-post-id");

    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å—Ç–∞
        const response = await fetch(`/api/posts/${postId}`, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${localStorage.getItem("authToken")}`,
            },
        });

        if (response.ok) {
            const post = await response.json();

            // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏–º–∏ –ø–æ—Å—Ç–∞
            document.getElementById("postTitle").value = post.title;
            document.getElementById("postContent").value = post.content;

            // –ü–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            createPostForm.style.display = "block";
            myPostsContainer.style.display = "none";
            postsContainer.style.display = "none"; // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å—Ç—ñ–≤

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –≤–∏–±–æ—Ä–æ–º
            await fetchCategories(post.categoryIds); // –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π

            // –ó–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–°—Ç–≤–æ—Ä–∏—Ç–∏" –Ω–∞ "–û–Ω–æ–≤–∏—Ç–∏"
            submitPostButton.textContent = "–û–Ω–æ–≤–∏—Ç–∏";

            // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
            submitPostButton.removeEventListener("click", createPost);
            submitPostButton.removeEventListener("click", handleUpdatePost(postId));

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
            const updateHandler = handleUpdatePost(postId);
            submitPostButton.addEventListener("click", updateHandler);
        } else {
            console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –°—Ç–∞—Ç—É—Å:", response.status);
            alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", error);
        alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
async function handleDeletePost(event) {
    event.stopPropagation(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ—Å—Ç–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É

    const postId = event.target.getAttribute("data-post-id");

    if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø–æ—Å—Ç?")) {
        try {
            const response = await fetch(`/api/posts/delete/${postId}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem("authToken")}`,
                },
            });

            if (response.ok) {
                alert("–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤
                await fetchAndRenderUserPosts();
            } else {
                console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç. –°—Ç–∞—Ç—É—Å:", response.status);
                alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç.");
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞:", error);
            alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞.");
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
export function renderPaginationControls(currentPage, totalPages) {
    let paginationContainer = document.getElementById("paginationContainer");

    if (!paginationContainer) {
        paginationContainer = document.createElement("div");
        paginationContainer.id = "paginationContainer";
        postsContainer.parentNode.appendChild(paginationContainer);
    }

    paginationContainer.innerHTML = "";

    if (currentPage > 1) {
        const prevButton = document.createElement("button");
        prevButton.textContent = "–ü–æ–ø–µ—Ä–µ–¥–Ω—è";
        prevButton.classList.add("button", "button-back");
        prevButton.addEventListener("click", () => {
            fetchAndRenderPosts(currentPage - 1);
        });
        paginationContainer.appendChild(prevButton);
    }

    if (currentPage < totalPages) {
        const nextButton = document.createElement("button");
        nextButton.textContent = "–ù–∞—Å—Ç—É–ø–Ω–∞";
        nextButton.classList.add("button");
        nextButton.addEventListener("click", () => {
            fetchAndRenderPosts(currentPage + 1);
        });
        paginationContainer.appendChild(nextButton);
    }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫—ñ–≤ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
export function attachLikeAndCommentHandlers() {
    const likeButtons = document.querySelectorAll(".likeButton");
    const commentButtons = document.querySelectorAll(".commentButton");

    likeButtons.forEach(button => {
        button.addEventListener("click", handleLikeButtonClick);
    });

    commentButtons.forEach(button => {
        button.addEventListener("click", handleCommentButtonClick);
    });
}

function handleLikeButtonClick(event) {
    const postId = event.target.getAttribute("data-post-id");
    console.log("–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É Like –¥–ª—è –ø–æ—Å—Ç–∞:", postId);
    // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ª–∞–π–∫—É –ø–æ—Å—Ç–∞
}

function handleCommentButtonClick(event) {
    const postId = event.target.getAttribute("data-post-id");
    console.log("–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É Comment –¥–ª—è –ø–æ—Å—Ç–∞:", postId);
    // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞
}

function formatDate(isoString) {
    const date = new Date(isoString);
    const options = {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false, // 24-–≥–æ–¥–∏–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    };
    return date.toLocaleString('uk-UA', options); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ª–æ–∫–∞–ª—å
}
