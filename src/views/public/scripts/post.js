// post.js
import { initAuth } from '/scripts/auth.js';

// –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
const postTitleElement = document.getElementById('post-title');
const postAuthorElement = document.getElementById('post-author');
const postContentElement = document.getElementById('post-content');
const postLikesCountElement = document.getElementById('post-likes-count');
const postDislikesCountElement = document.getElementById('post-dislikes-count');
const postCommentsCountElement = document.getElementById('post-comments-count');
const postLikeButton = document.getElementById('post-like-button');
const postDislikeButton = document.getElementById('post-dislike-button');
const commentsListElement = document.getElementById('comments-list');
const addCommentForm = document.getElementById('add-comment-form');
const commentContentInput = document.getElementById('comment-content');
const addCommentSection = document.getElementById('add-comment-section');

// –û—Ç—Ä–∏–º—É—î–º–æ `postId` –∑ URL
function getPostIdFromURL() {
  const params = new URLSearchParams(window.location.search);
  return params.get('postId');
}

// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–¥—ñ
const postId = getPostIdFromURL();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', async () => {
  await initAuth(); // –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

  if (!postId) {
    alert('–ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä.');
    return;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è UI
  checkAuthenticationAndModifyUI();

  // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å—Ç—É
  fetchPostData();

  // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –ø–æ—Å—Ç—É
  fetchComments();

  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫—É/–¥–∏–∑–ª–∞–π–∫—É –ø–æ—Å—Ç—É
  postLikeButton.addEventListener('click', () => handlePostLikeDislike('like'));
  postDislikeButton.addEventListener('click', () => handlePostLikeDislike('dislike'));

  // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
  if (localStorage.getItem('authToken')) {
    addCommentForm.addEventListener('submit', handleAddComment);
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –∑–º—ñ–Ω–∏ UI
function checkAuthenticationAndModifyUI() {
  const isAuth = localStorage.getItem('authToken') !== null;

  if (!isAuth) {
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Ñ–æ—Ä–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    addCommentSection.innerHTML = '<p>–ë—É–¥—å –ª–∞—Å–∫–∞, <a href="/login">—É–≤—ñ–π–¥—ñ—Ç—å</a>, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä.</p>';
  } else {
    // –ü–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ä–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    addCommentSection.style.display = 'block';
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Å—Ç—É
function fetchPostData() {
  fetch(`/api/posts/${postId}`)
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ—Å—Ç—É.');
      }
    })
    .then(post => {
      displayPost(post);
    })
    .catch(error => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å—Ç—É:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å—Ç—É.');
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Å—Ç—É
function displayPost(post) {
  postTitleElement.textContent = post.title;
  postAuthorElement.textContent = `–ê–≤—Ç–æ—Ä: ${post.author}`;
  postContentElement.innerHTML = post.content;
  postLikesCountElement.textContent = post.likesCount;
  postDislikesCountElement.textContent = post.dislikesCount;
  postCommentsCountElement.textContent = `${post.commentsCount} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫—É/–¥–∏–∑–ª–∞–π–∫—É –ø–æ—Å—Ç—É
function handlePostLikeDislike(type) {
  if (!localStorage.getItem('authToken')) {
    alert('–î–ª—è —Ü—ñ—î—ó –¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
    return;
  }

  const token = localStorage.getItem('authToken');

  fetch(`/api/likes/post/${postId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ type })
  })
  .then(response => {
    if (response.ok) {
      fetchPostData();
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é.');
    }
  })
  .catch(error => {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É/–¥–∏–∑–ª–∞–π–∫—É –ø–æ—Å—Ç—É:', error);
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è
function fetchComments() {
  fetch(`/api/comments/post/${postId}`)
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ.');
      }
    })
    .then(comments => {
      displayComments(comments);
    })
    .catch(error => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:', error);
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è
function displayComments(comments) {
  commentsListElement.innerHTML = '';

  if (!comments || comments.length === 0) {
    commentsListElement.innerHTML = '<p>–ù–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.</p>';
    return;
  }

  comments.forEach(comment => {
    const commentElement = createCommentElement(comment);
    commentsListElement.appendChild(commentElement);
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
function createCommentElement(comment) {
  const commentDiv = document.createElement('div');
  commentDiv.classList.add('comment');

  const contentP = document.createElement('p');
  contentP.textContent = comment.content;

  const authorP = document.createElement('p');
  authorP.textContent = `–ê–≤—Ç–æ—Ä: ${comment.author}`;

  const metaDiv = document.createElement('div');
  metaDiv.classList.add('comment-meta');

  const likeButton = document.createElement('button');
  likeButton.textContent = `üëç (${comment.likeCount})`;
  likeButton.addEventListener('click', () => handleCommentLikeDislike(comment.id, 'like'));

  const dislikeButton = document.createElement('button');
  dislikeButton.textContent = `üëé (${comment.dislikeCount})`;
  dislikeButton.addEventListener('click', () => handleCommentLikeDislike(comment.id, 'dislike'));

  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
  const replyCountButton = document.createElement('button');
  replyCountButton.textContent = `${comment.replyCount} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π`;
  replyCountButton.addEventListener('click', () => toggleReplies(comment.id, commentDiv, replyCountButton));

  metaDiv.appendChild(likeButton);
  metaDiv.appendChild(dislikeButton);
  metaDiv.appendChild(replyCountButton);

  commentDiv.appendChild(contentP);
  commentDiv.appendChild(authorP);
  commentDiv.appendChild(metaDiv);

  return commentDiv;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫—É/–¥–∏–∑–ª–∞–π–∫—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è
function handleCommentLikeDislike(commentId, type) {
  if (!localStorage.getItem('authToken')) {
    alert('–î–ª—è —Ü—ñ—î—ó –¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
    return;
  }

  const token = localStorage.getItem('authToken');

  fetch(`/api/likes/comment/${commentId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ type })
  })
  .then(response => {
    if (response.ok) {
      fetchComments();
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é.');
    }
  })
  .catch(error => {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É/–¥–∏–∑–ª–∞–π–∫—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è:', error);
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
function handleAddComment(event) {
  event.preventDefault();

  const content = commentContentInput.value.trim();

  if (!content) {
    alert('–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.');
    return;
  }

  const token = localStorage.getItem('authToken');

  fetch('/api/comments', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ content, postId })
  })
  .then(response => {
    if (response.ok) {
      return response.json();
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä.');
    }
  })
  .then(newComment => {
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É
    commentContentInput.value = '';
    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Å–ø–∏—Å–∫—É
    const commentElement = createCommentElement(newComment);
    commentsListElement.prepend(commentElement);
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    updateCommentsCount(1);
  })
  .catch(error => {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è:', error);
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
function updateCommentsCount(delta) {
  const currentCount = parseInt(postCommentsCountElement.textContent) || 0;
  postCommentsCountElement.textContent = `${currentCount + delta} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä
function toggleReplies(commentId, commentDiv, replyCountButton) {
  let repliesContainer = commentDiv.querySelector('.replies-container');

  if (repliesContainer) {
    // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –∞–±–æ –ø–æ–∫–∞–∑—É—î–º–æ —ó—Ö
    repliesContainer.classList.toggle('hidden');
    // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    if (repliesContainer.classList.contains('hidden')) {
      replyCountButton.textContent = replyCountButton.textContent.replace('–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏', `${repliesContainer.dataset.replyCount} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π`);
    } else {
      replyCountButton.textContent = '–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ';
    }
  } else {
    // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –æ—Ç—Ä–∏–º—É—î–º–æ —ó—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞
    fetch(`/api/comments/${commentId}/replies`)
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä.');
        }
      })
      .then(replies => {
        repliesContainer = document.createElement('div');
        repliesContainer.classList.add('replies-container');
        repliesContainer.dataset.replyCount = replies.length;

        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        replies.forEach(reply => {
          const replyElement = createCommentElement(reply);
          repliesContainer.appendChild(replyElement);
        });

        // –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (localStorage.getItem('authToken')) {
          const replyFormDiv = createReplyForm(commentId, repliesContainer);
          repliesContainer.appendChild(replyFormDiv);
        }

        commentDiv.appendChild(repliesContainer);
        // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        replyCountButton.textContent = '–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ';
      })
      .catch(error => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:', error);
      });
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
function createReplyForm(parentCommentId, repliesContainer) {
  const replyFormDiv = document.createElement('div');
  replyFormDiv.classList.add('reply-form');

  const replyForm = document.createElement('form');
  const replyTextarea = document.createElement('textarea');
  replyTextarea.required = true;

  const submitButton = document.createElement('button');
  submitButton.type = 'submit';
  submitButton.textContent = '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏';

  replyForm.appendChild(replyTextarea);
  replyForm.appendChild(submitButton);
  replyFormDiv.appendChild(replyForm);

  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  replyForm.addEventListener('submit', (event) => {
    event.preventDefault();
    handleAddReply(replyTextarea.value, parentCommentId, repliesContainer);
    replyTextarea.value = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É
  });

  return replyFormDiv;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä
function handleAddReply(content, parentCommentId, repliesContainer) {
  if (!localStorage.getItem('authToken')) {
    alert('–î–ª—è —Ü—ñ—î—ó –¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
    return;
  }

  if (!content.trim()) {
    alert('–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.');
    return;
  }

  const token = localStorage.getItem('authToken');

  fetch('/api/comments', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ content, postId, parentCommentId })
  })
  .then(response => {
    if (response.ok) {
      return response.json();
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.');
    }
  })
  .then(newReply => {
    // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const replyElement = createCommentElement(newReply);
    repliesContainer.insertBefore(replyElement, repliesContainer.lastElementChild); // –ü–µ—Ä–µ–¥ —Ñ–æ—Ä–º–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const replyCount = parseInt(repliesContainer.dataset.replyCount) || 0;
    repliesContainer.dataset.replyCount = replyCount + 1;

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    const replyCountButton = repliesContainer.parentElement.querySelector('.comment-meta button:nth-child(3)');
    replyCountButton.textContent = `${replyCount + 1} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π`;
  })
  .catch(error => {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error);
  });
}
